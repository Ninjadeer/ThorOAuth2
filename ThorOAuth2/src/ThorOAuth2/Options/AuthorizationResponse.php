<?php

/**
 * This class models the Error Response for the OAuth 2.0
 * http://tools.ietf.org/html/draft-ietf-oauth-v2-27#section-4.1.2.1
 *  *
 * @author balchc
 */

namespace ThorOAuth2\Options;

use ZfcBase\Model\ModelAbstract;

class AuthorizationResponse extends ModelAbstract {

	/**
	 * The request is missing a required parameter, includes an
	 * invalid parameter value, includes a parameter more than
	 * once, or is otherwise malformed.
	 * @var string
	 */
	const INVALID_REQUEST = 'invalid_request';

	/**
	 * The client is not authorized to request an authorization
	 * code using this method.
	 * @var string
	 */
	const UNAUTHORIZED_CLIENT = 'unauthorized_client';

	/**
	 * The resource owner or authorization server denied the
	 * request.
	 * @var string
	 */
	const ACCESS_DENIED = 'access_denied';

	/**
	 * The authorization server does not support obtaining an
	 * authorization code using this method.
	 * @var string
	 */
	const UNSUPPORTED_RESPONSE_TYPE = 'unsupported_response_type';

	/**
	 * The requested scope is invalid, unknown, or malformed.
	 * @var string
	 */
	const INVALID_SCOPE = 'invalid_scope';

	/**
	 *  The authorization server encountered an unexpected
	 * condition which prevented it from fulfilling the request.
	 * @var string
	 */
	const SERVER_ERROR = 'server_error';

	/**
	 * The authorization server is currently unable to handle
	 * the request due to a temporary overloading or maintenance
	 * of the server.
	 * @var string
	 */
	const TEMPORARILY_UNAVAILABLE = 'temporarily_unavailable';


	private $error_descriptions = array(
		self::INVALID_REQUEST => 'The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.',
		self::UNAUTHORIZED_CLIENT => 'The client is not authorized to request an authorization code using this method.',
		self::ACCESS_DENIED => 'The resource owner or authorization server denied the request.',
		self::UNSUPPORTED_RESPONSE_TYPE => 'The authorization server does not support obtaining an authorization code using this method.',
		self::INVALID_SCOPE => 'The requested scope is invalid, unknown, or malformed.',
		self::SERVER_ERROR => 'The authorization server encountered an unexpected condition which prevented it from fulfilling the request.',
		self::TEMPORARILY_UNAVAILABLE => 'The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.'
	);

	/**
	 * REQUIRED.  A single ASCII [USASCII] error code from the
	 * following:
	 * invalid_request
	 * 		The request is missing a required parameter, includes an
	 * 		invalid parameter value, includes a parameter more than
	 * 		once, or is otherwise malformed.
	 * unauthorized_client
	 * 		The client is not authorized to request an authorization
	 * 		code using this method.
	 * 		access_denied
	 * 		The resource owner or authorization server denied the
	 * 		request.
	 * unsupported_response_type
	 * 		The authorization server does not support obtaining an
	 * 		authorization code using this method.
	 * invalid_scope
	 * 		The requested scope is invalid, unknown, or malformed.
	 * server_error
	 * 		The authorization server encountered an unexpected
	 * 		condition which prevented it from fulfilling the request.
	 * temporarily_unavailable
	 * 		The authorization server is currently unable to handle
	 * 		the request due to a temporary overloading or maintenance
	 * 		of the server.
	 * Values for the "error" parameter MUST NOT include characters
	 * outside the set %x20-21 / %x23-5B / %x5D-7E.
	 * @var string
	 */
	public $error;


	/**
	 * error_description
	 * OPTIONAL.  A human-readable ASCII [USASCII] text providing
	 * additional information, used to assist the client developer in
	 * understanding the error that occurred.
	 * Values for the "error_description" parameter MUST NOT include
	 * characters outside the set %x20-21 / %x23-5B / %x5D-7E.
	 * @var unknown_type
	 */
	public $error_description;


	/**
	 * error_uri
	 * OPTIONAL.  A URI identifying a human-readable web page with
	 * information about the error, used to provide the client
	 * developer with additional information about the error.
	 * Values for the "error_uri" parameter MUST conform to the URI-
	 * Reference syntax, and thus MUST NOT include characters outside
	 * the set %x21 / %x23-5B / %x5D-7E.
	 * @var string
	 */
	public $error_uri;


	/**
	 * REQUIRED if a "state" parameter was present in the client
	 * authorization request.  The exact value received from the
	 * client.
	 * @var unknown_type
	 */
	public $state;

	/**
	 * REQUIRED.  The authorization code generated by the
	 * authorization server.  The authorization code MUST expire
	 * shortly after it is issued to mitigate the risk of leaks.  A
	 * maximum authorization code lifetime of 10 minutes is
	 * RECOMMENDED.  The client MUST NOT use the authorization code
	 * more than once.  If an authorization code is used more than
	 * once, the authorization server MUST deny the request and SHOULD
	 * revoke (when possible) all tokens previously issued based on
	 * that authorization code.  The authorization code is bound to
	 * the client identifier and redirection URI.
	 * @var string
	 */
	protected $code;


	public function getError()
	{
	    return $this->error;
	}

	public function setError($error)
	{
	    $this->error = $error;
	}

	public function getErrorDescription()
	{
		if (null == $this->error_description && key_exists($this->error, $this->error_descriptions)) {
			return $this->error_descriptions[$this->error];
		}
	    return $this->error_description;
	}

	public function setErrorDescription($error_description)
	{
	    $this->error_description = $error_description;
	}

	public function getErrorUri()
	{
	    return $this->error_uri;
	}

	public function setErrorUri($error_uri)
	{
	    $this->error_uri = $error_uri;
	}

	public function getState()
	{
	    return $this->state;
	}

	public function setState($state)
	{
	    $this->state = $state;
	}

	public function getCode()
	{
	    return $this->code;
	}

	public function setCode($code)
	{
	    $this->code = $code;
	}
}